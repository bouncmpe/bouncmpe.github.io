name: Convert News/Event Issue to Markdown

on:
  issues:
    types: [opened]

jobs:
  generate-post:
    if: contains(join(github.event.issue.labels.*.name, ','), 'automation')
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Extract issue data and generate markdown
        run: |
          # Write issue body to file
          echo "${{ github.event.issue.body }}" > issue-body.md

          # Extract labels into a space-separated string
          LABELS="${{ github.event.issue.labels.*.name }}"

          # Run extraction script
          python3 << 'EOF'
            import re
            import os
            import requests
            from urllib.parse import urlparse
            from datetime import datetime

            # Read raw issue body and labels
            issue_body = open('issue-body.md', encoding='utf-8').read()
            labels = LABELS.split()

            # Utility to extract a section by its heading
            def extract_field(label):
                m = re.search(rf"### {re.escape(label)}\s+(.+?)(?=(\n###|$))", issue_body, re.DOTALL)
                return m.group(1).strip() if m else ''

            is_news = 'news' in labels
            kind = 'news' if is_news else 'events'

            # Common fields
            title = extract_field('Title')
            content = extract_field('Content') or extract_field('Description (EN)')

            # Determine folder and validate dates
            if is_news:
                date = extract_field('Date')
                # Validate date format
                datetime.fromisoformat(date)
                slug = '-'.join(title.lower().split())
                folder = f"content/news/{date}-{slug}"
            else:
                dt = extract_field('Start Date and Time')
                # Validate datetime format
                dt_obj = datetime.fromisoformat(dt)
                dt_str = dt_obj.isoformat().replace(':', '-')
                slug = '-'.join(title.lower().split())
                folder = f"content/events/{dt_str}-{slug}"

            # Handle image upload
            image_field = extract_field('Poster or Cover Image') or extract_field('Thumbnail Image')
            image_path = ''
            if image_field:
                img_match = re.search(r'!\[.*?\]\((https://user-images\.githubusercontent\.com/.*?)\)', image_field)
                if img_match:
                    url = img_match.group(1)
                    filename = os.path.basename(urlparse(url).path)
                    os.makedirs('static/uploads', exist_ok=True)
                    r = requests.get(url)
                    with open(f'static/uploads/{filename}', 'wb') as out:
                        out.write(r.content)
                    image_path = f"uploads/{filename}"

            # Create folder for post
            os.makedirs(folder, exist_ok=True)

            # Write English markdown
            en_path = os.path.join(folder, 'index.en.md')
            with open(en_path, 'w', encoding='utf-8') as f:
                f.write('---\n')
                if is_news:
                    f.write('type: news\n')
                    f.write(f"title: \"{title}\"\n")
                    f.write(f"date: {date}\n")
                    if image_path:
                        f.write(f"thumbnail: {image_path}\n")
                else:
                    f.write('type: event\n')
                    f.write(f"title: \"{title}\"\n")
                    f.write(f"datetime: {dt}\n")
                    duration = extract_field('Duration')
                    if duration:
                        f.write(f"duration: {duration}\n")
                    location = extract_field('Location')
                    f.write(f"location: \"{location}\"\n")
                f.write('---\n\n')
                if image_path and is_news:
                    f.write(f"![{title}]({image_path})\n\n")
                f.write(content)

            # Write Turkish stub
            tr_path = os.path.join(folder, 'index.tr.md')
            with open(tr_path, 'w', encoding='utf-8') as f:
                f.write('---\n')
                if is_news:
                    f.write('type: news\n')
                    f.write(f"title: \"{title}\"\n")
                    f.write(f"date: {date}\n")
                    if image_path:
                        f.write(f"thumbnail: {image_path}\n")
                else:
                    f.write('type: event\n')
                    f.write(f"title: \"{title}\"\n")
                    f.write(f"datetime: {dt}\n")
                    duration = extract_field('Duration')
                    if duration:
                        f.write(f"duration: {duration}\n")
                    location = extract_field('Location')
                    f.write(f"location: \"{location}\"\n")
                f.write('---\n')
          EOF
