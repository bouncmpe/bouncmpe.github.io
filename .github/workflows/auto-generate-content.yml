name: Auto Generate Content

on:
  issues:
    types: [opened]

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-content:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract issue body to file
        run: |
          echo "${{ github.event.issue.body }}" > issue-body.md

      - name: Generate markdown from issue
        run: |
          python3 <<'EOF'
          import re, os, unicodedata, json
          from datetime import datetime

          # Read the issue body
          with open("issue-body.md", encoding="utf-8") as f:
              body = f.read()

          def extract(label):
              m = re.search(rf"### {re.escape(label)}\s+(.+?)(?=(\n###|$))", body, re.DOTALL)
              return m.group(1).strip() if m else ""

          def slugify(t):
              s = unicodedata.normalize('NFKD', t).encode('ascii','ignore').decode('ascii')
              return re.sub(r'[^a-z0-9]+', '-', s.lower()).strip('-')

          # Get labels applied to this issue
          labels = [l['name'].lower() for l in json.loads(r'''${{ toJson(github.event.issue.labels) }}''')]

          is_event = 'event' in labels
          is_news  = 'news'  in labels

          # Decide which type, then write to content/â€¦
          if is_event:
              title = extract("Title")
              name  = extract("Event Name")
              dt    = extract("Start Date and Time")
              dt_iso = datetime.fromisoformat(dt).isoformat()
              dur   = extract("Duration")
              loc   = extract("Location")
              desc  = extract("Description (EN)")
              img   = extract("Poster or Cover Image")

              slug   = slugify(name or title)
              folder = f"content/events/{dt.replace(':','-')}-{slug}"
              os.makedirs(folder, exist_ok=True)
              path   = f"{folder}/index.en.md"

              with open(path, "w", encoding="utf-8") as f:
                  f.write("---\n")
                  f.write("type: phd-thesis-defense\n")
                  f.write(f'title: "{title}"\n')
                  f.write(f"name: {name}\n")
                  f.write(f"datetime: {dt_iso}\n")
                  if dur: f.write(f"duration: {dur}\n")
                  f.write(f"location: {loc}\n")
                  f.write("---\n\n")
                  if img: f.write(img + "\n\n")
                  f.write(desc + "\n")

          elif is_news:
              title = extract("Title")
              date  = extract("Date")
              desc  = extract("Description (EN)")
              img   = extract("Thumbnail Image")

              slug   = slugify(title)
              folder = f"content/news/{date}-news-{slug}"
              os.makedirs(folder, exist_ok=True)
              path   = f"{folder}/index.en.md"

              with open(path, "w", encoding="utf-8") as f:
                  f.write("---\n")
                  f.write("type: news\n")
                  f.write(f'title: "{title}"\n')
                  f.write(f"description: {title}\n")
                  f.write("featured: false\n")
                  f.write(f"date: {date}\n")
                  if img:
                      m = re.search(r'!\[.*?\]\((.*?)\)', img)
                      if m: f.write(f"thumbnail: {m.group(1)}\n")
                  f.write("---\n\n")
                  f.write(desc + "\n")

          else:
              print("No `news` or `event` label found.")
              exit(1)

          print(" Generated:", path)
          EOF

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Add post from issue #${{ github.event.issue.number }}"
          branch: "auto/issue-${{ github.event.issue.number }}"
          title: "Auto post from issue #${{ github.event.issue.number }}"

